const { Connection } = require('@solana/web3.js');
require('dotenv').config();

const { SOL_AMOUNT = 10, WS_TOKEN } = process.env;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏
const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –±–ª–æ–∫—É –∑ –∫—ñ–ª—å–∫–æ–º–∞ —Å–ø—Ä–æ–±–∞–º–∏
const getBlockWithRetry = async (connection, slot, maxRetries = 5, delay = 3000) => {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`–°–ø—Ä–æ–±–∞ ${attempt} –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–ª–æ–∫ –¥–ª—è —Å–ª–æ—Ç–∞: ${slot}`);
      const block = await connection.getBlock(slot, {
        commitment: 'finalized',
        transactionDetails: 'full', 
        rewards: true, 
        maxSupportedTransactionVersion: 0, 
      });

      if (block) {
        console.log(`–ë–ª–æ–∫ –¥–ª—è —Å–ª–æ—Ç–∞ ${slot} —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ.`);
        return block;
      }
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–ª–æ–∫—É –¥–ª—è —Å–ª–æ—Ç–∞ ${slot} (—Å–ø—Ä–æ–±–∞ ${attempt}/${maxRetries}):`, error.message);
    }
    
    console.log(`–û—á—ñ–∫—É–≤–∞–Ω–Ω—è ${delay} –º—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
    await wait(delay);
  }

  throw new Error(`–ë–ª–æ–∫ –¥–ª—è —Å–ª–æ—Ç–∞ ${slot} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è ${maxRetries} —Å–ø—Ä–æ–±.`);
};

const main = async () => {
  try {
    const httpUrl = `https://rpc-mainnet.solanatracker.io/?api_key=${WS_TOKEN}`;
    const connectionHttp = new Connection(httpUrl, 'finalized');

    console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Solana —á–µ—Ä–µ–∑ HTTP RPC...');

    let lastSlot = await connectionHttp.getSlot('finalized');
    console.log(`–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ª–æ—Ç: ${lastSlot}`);

    setInterval(async () => {
      try {
        const currentSlot = await connectionHttp.getSlot('finalized');

        if (currentSlot > lastSlot) {
          console.log(`–ù–æ–≤–∏–π —Å–ª–æ—Ç –≤–∏—è–≤–ª–µ–Ω–æ: ${currentSlot}`);
          lastSlot = currentSlot;

          const block = await getBlockWithRetry(connectionHttp, currentSlot);
          console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —É –±–ª–æ—Ü—ñ:', block.transactions.length);
          
          const systemProgramId = '11111111111111111111111111111111';
          const minAmountLamports = BigInt(SOL_AMOUNT * 1e9); 

          const highValueTransactions = await Promise.all(
            block.transactions.map(async (tx) => {
              if (!tx.transaction || !tx.transaction.message || !tx.transaction.message.instructions) {
                return null;
              }

              const accountKeys = tx.transaction.message.accountKeys;
              const instructions = tx.transaction.message.instructions;

              for (const instruction of instructions) {
                if (!accountKeys[instruction.programIdIndex]) {
                  console.warn(`ProgramIdIndex ${instruction.programIdIndex} –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ accountKeys —É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:`, tx.transaction.signatures[0]);
                  continue;
                }

                const programId = accountKeys[instruction.programIdIndex].toString();
                const dataBuffer = Buffer.from(instruction.data, 'base64');

                if (programId === systemProgramId && dataBuffer[0] === 2) {
                  if (dataBuffer.length >= 9) {
                    const lamports = dataBuffer.readBigUInt64LE(1);
                    const solAmount = Number(lamports) / 1e9;

                    if (lamports >= minAmountLamports) {
                      const receiverIndex = instruction.accounts[1]; 
                      const receiverAddress = accountKeys[receiverIndex].toString();
                      console.log(`–û—Ç—Ä–∏–º—É–≤–∞—á: ${receiverAddress}, –õ–∞–º–ø–æ—Ä—Ç–∏: ${lamports} (${solAmount} SOL)`);

                      // –û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—î—é
                      const preBalance = await connectionHttp.getBalance(receiverAddress, 'processed');
                      console.log(`–ë–∞–ª–∞–Ω—Å –¥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: ${preBalance / 1e9} SOL –¥–ª—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: ${receiverAddress}`);

                      if (preBalance === 0) {
                        console.log(`üí∞ –ù–æ–≤–∏–π –≥–∞–º–∞–Ω–µ—Ü—å –≤–∏—è–≤–ª–µ–Ω–æ: ${receiverAddress} –æ—Ç—Ä–∏–º–∞–≤ ${solAmount} SOL`);
                      }

                      return {
                        signature: tx.transaction.signatures[0],
                        receiver: receiverAddress,
                        solAmount
                      };
                    }
                  } else {
                    console.warn(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–π—Ç—ñ–≤ —É dataBuffer –¥–ª—è –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –ª–∞–º–ø–æ—Ä—Ç—ñ–≤. –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è: ${tx.transaction.signatures[0]}`);
                  }
                }
              }
              return null;
            })
          );

          const validTransactions = highValueTransactions.filter(tx => tx !== null);

          console.log(`–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —ñ–∑ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–º ${SOL_AMOUNT}+ SOL: ${validTransactions.length}`);
          validTransactions.forEach((tx, index) => {
            console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –∑ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–º ${SOL_AMOUNT}+ SOL ${index + 1}: –ü—ñ–¥–ø–∏—Å: ${tx.signature}, –û—Ç—Ä–∏–º—É–≤–∞—á: ${tx.receiver}, –°—É–º–∞: ${tx.solAmount} SOL`);
          });
        }
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å–ª–æ—Ç–∞:', error.message);
      }
    }, 1000);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞:', error.message);
    console.error(error);
  }
};

main();
