const { Connection } = require('@solana/web3.js');
const axios = require('axios');
const { ipcMain } = require('electron');
require('dotenv').config();

const { SOL_AMOUNT = 10, WS_TOKEN, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID } = process.env;

const sendTelegramMessage = async (message, log) => {
  try {
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

    const response = await axios.post(url, {
      chat_id: TELEGRAM_CHAT_ID,
      text: message,
      parse_mode: 'Markdown'
    });

    console.log('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram:', response.data);
    log('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram: ' + message);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram:', error.message);
    log('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ' + error.message);
  }
};

const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const getBlockWithRetry = async (connection, slot, log, maxRetries = 5, delay = 3000) => {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`–°–ø—Ä–æ–±–∞ ${attempt} –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–ª–æ–∫ –¥–ª—è —Å–ª–æ—Ç–∞: ${slot}`);
      log(`–°–ø—Ä–æ–±–∞ ${attempt} –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–ª–æ–∫ –¥–ª—è —Å–ª–æ—Ç–∞: ${slot}`);
      const block = await connection.getBlock(slot, {
        commitment: 'finalized',
        transactionDetails: 'full', 
        rewards: true, 
        maxSupportedTransactionVersion: 0, 
      });

      if (block) {
        console.log(`–ë–ª–æ–∫ –¥–ª—è —Å–ª–æ—Ç–∞ ${slot} —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ.`);
        log(`–ë–ª–æ–∫ –¥–ª—è —Å–ª–æ—Ç–∞ ${slot} —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ.`);
        return block;
      }
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–ª–æ–∫—É –¥–ª—è —Å–ª–æ—Ç–∞ ${slot} (—Å–ø—Ä–æ–±–∞ ${attempt}/${maxRetries}):`, error.message);
      log(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–ª–æ–∫—É –¥–ª—è —Å–ª–æ—Ç–∞ ${slot} (—Å–ø—Ä–æ–±–∞ ${attempt}/${maxRetries}): ${error.message}`);
    }
    
    console.log(`–û—á—ñ–∫—É–≤–∞–Ω–Ω—è ${delay} –º—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
    await wait(delay);
  }

  throw new Error(`–ë–ª–æ–∫ –¥–ª—è —Å–ª–æ—Ç–∞ ${slot} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è ${maxRetries} —Å–ø—Ä–æ–±.`);
};

const main = async (log, stopCallback) => {
  try {
    const httpUrl = `https://rpc-mainnet.solanatracker.io/?api_key=${WS_TOKEN}`;
    const connectionHttp = new Connection(httpUrl, 'finalized');

    log('üì° –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Solana —á–µ—Ä–µ–∑ HTTP RPC...');

    let lastSlot = await connectionHttp.getSlot('finalized');
    log(`üì¶ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ª–æ—Ç: ${lastSlot}`);

    while (true) {
      if (stopCallback()) {
        log('üõë –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å –∑—É–ø–∏–Ω–µ–Ω–æ.');
        break;
      }

      log(`üì¶ –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —Å–ª–æ—Ç: ${lastSlot}`);

      try {
        const block = await getBlockWithRetry(connectionHttp, lastSlot, log);

        log(`üîç –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —É –±–ª–æ—Ü—ñ: ${block.transactions.length}`);

        const systemProgramId = '11111111111111111111111111111111';

        const highValueTransactions = await Promise.all(
          block.transactions.map(async (tx) => {
            if (!tx.transaction || !tx.transaction.message || !tx.transaction.message.instructions) {
              return null;
            }

            const accountKeys = tx.transaction.message.accountKeys;
            const instructions = tx.transaction.message.instructions;

            for (const instruction of instructions) {
              if (!accountKeys[instruction.programIdIndex]) {
                log(`‚ö†Ô∏è ProgramIdIndex ${instruction.programIdIndex} –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ accountKeys —É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: ${tx.transaction.signatures[0]}`);
                continue;
              }

              const programId = accountKeys[instruction.programIdIndex].toString();
              const dataBuffer = Buffer.from(instruction.data, 'base64');

              if (programId === systemProgramId && dataBuffer[0] === 220) {
                if (dataBuffer.length >= 9) {
                  const preBalances = tx.meta.preBalances;
                  const postBalances = tx.meta.postBalances;
                  const balanceChanges = preBalances.map((preBalance, index) => {
                    const postBalance = postBalances[index];
                    const change = postBalance - preBalance;
                    return {
                      account: tx.transaction.message.accountKeys[index] || `Account${index + 1}`,
                      preBalance: preBalance / 1e9,
                      postBalance: postBalance / 1e9,
                      change: change / 1e9
                    };
                  });
                  const receivers = balanceChanges.filter(change => change.change > 0);
                  if (receivers[0]) {
                    if (
                      receivers[0].preBalance === 0 
                      && receivers[0].postBalance >= SOL_AMOUNT
                    ) {
                      const message = `üí∞ –ù–æ–≤–∏–π –≥–∞–º–∞–Ω–µ—Ü—å –≤–∏—è–≤–ª–µ–Ω–æ: \`${receivers[0].account.toString()}\` –æ—Ç—Ä–∏–º–∞–≤ ${receivers[0].postBalance} SOL`;
                      log(message);
                      await sendTelegramMessage(message, log);
                    }
                    return {
                      signature: tx.transaction.signatures[0],
                      receiver: receivers[0].account.toString(),
                      solAmount: receivers[0].postBalance,
                    };
                  }
                } else {
                  log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–π—Ç—ñ–≤ —É dataBuffer –¥–ª—è –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –ª–∞–º–ø–æ—Ä—Ç—ñ–≤. –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è: ${tx.transaction.signatures[0]}`);
                }
              }
            }
            return null;
          })
        );

        const validTransactions = highValueTransactions.filter(tx => tx !== null);

        log(`üìã –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —ñ–∑ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–º ${SOL_AMOUNT}+ SOL: ${validTransactions.length}`);

        validTransactions.forEach((tx, index) => {
          log(`üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –∑ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–º ${SOL_AMOUNT}+ SOL ${index + 1}: –ü—ñ–¥–ø–∏—Å: ${tx.signature}, –û—Ç—Ä–∏–º—É–≤–∞—á: ${tx.receiver}, –°—É–º–∞: ${tx.solAmount} SOL`);
        });

      } catch (error) {
        log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å–ª–æ—Ç–∞ ${lastSlot}: ${error.message}`);
      }

      lastSlot += 1;
      log(`üì¶ –°–ª–æ—Ç –∑–±—ñ–ª—å—à–µ–Ω–æ –¥–æ: ${lastSlot}`);
    }
  } catch (error) {
    log(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
  }
};

module.exports = { main };
